import { config } from 'dotenv'
import { execSync } from 'child_process'
import { existsSync } from 'fs'
import { join } from 'path'

// Charger les variables d'environnement
config({ path: '.env.local' })

interface MigrationStep {
  name: string
  description: string
  command: string
  required: boolean
  skipIf?: () => boolean
}

class CompleteMigrationManager {
  private steps: MigrationStep[] = []
  private results: Array<{ step: string; success: boolean; output?: string; error?: string }> = []

  constructor() {
    this.initializeSteps()
  }

  private log(message: string, level: 'info' | 'success' | 'warning' | 'error' = 'info') {
    const icons = {
      info: '‚ÑπÔ∏è',
      success: '‚úÖ',
      warning: '‚ö†Ô∏è',
      error: '‚ùå',
    }
    console.log(`${icons[level]} ${message}`)
  }

  private initializeSteps() {
    this.steps = [
      {
        name: 'check-env',
        description: "V√©rification des variables d'environnement",
        command: 'npx tsx src/scripts/check-collections.ts',
        required: true,
      },
      {
        name: 'migrate-data',
        description: 'Migration des donn√©es mock vers Payload',
        command: 'npx tsx src/scripts/migrate-collections-complete.ts',
        required: true,
        skipIf: () => {
          // V√©rifier si des donn√©es existent d√©j√†
          return process.env.NEXT_PUBLIC_USE_PAYLOAD === 'true'
        },
      },
      {
        name: 'test-migration',
        description: 'Test de la migration',
        command: 'npx tsx src/scripts/test-migration.ts',
        required: true,
      },
      {
        name: 'switch-to-payload',
        description: 'Basculement vers Payload CMS',
        command: 'npx tsx src/scripts/switch-to-payload.ts payload',
        required: true,
      },
      {
        name: 'generate-types',
        description: 'G√©n√©ration des types TypeScript',
        command: 'npm run generate:types',
        required: false,
      },
      {
        name: 'final-test',
        description: "Test final de l'application",
        command: 'npx tsx src/scripts/test-migration.ts',
        required: false,
      },
    ]
  }

  private async executeStep(step: MigrationStep): Promise<boolean> {
    this.log(`\nüîÑ ${step.description}...`)

    try {
      // V√©rifier si l'√©tape doit √™tre ignor√©e
      if (step.skipIf && step.skipIf()) {
        this.log(`‚è≠Ô∏è √âtape ignor√©e: ${step.name}`, 'warning')
        this.results.push({ step: step.name, success: true, output: '√âtape ignor√©e' })
        return true
      }

      // Ex√©cuter la commande
      const output = execSync(step.command, {
        encoding: 'utf-8',
        stdio: 'pipe',
        cwd: process.cwd(),
      })

      this.log(`‚úÖ ${step.description} - Succ√®s`, 'success')
      this.results.push({ step: step.name, success: true, output })
      return true
    } catch (error: any) {
      this.log(`‚ùå ${step.description} - √âchec`, 'error')
      this.log(`   Erreur: ${error.message}`, 'error')

      this.results.push({
        step: step.name,
        success: false,
        error: error.message,
        output: error.stdout || error.stderr,
      })

      if (step.required) {
        this.log(`üí• √âtape requise √©chou√©e: ${step.name}`, 'error')
        return false
      } else {
        this.log(`‚ö†Ô∏è √âtape optionnelle √©chou√©e: ${step.name}`, 'warning')
        return true
      }
    }
  }

  private checkPrerequisites(): boolean {
    this.log('üîç V√©rification des pr√©requis...')

    // V√©rifier Node.js
    try {
      const nodeVersion = execSync('node --version', { encoding: 'utf-8' }).trim()
      this.log(`‚úÖ Node.js: ${nodeVersion}`)
    } catch {
      this.log('‚ùå Node.js non install√©', 'error')
      return false
    }

    // V√©rifier npm
    try {
      const npmVersion = execSync('npm --version', { encoding: 'utf-8' }).trim()
      this.log(`‚úÖ npm: ${npmVersion}`)
    } catch {
      this.log('‚ùå npm non install√©', 'error')
      return false
    }

    // V√©rifier les variables d'environnement
    if (!process.env.MONGODB_URI) {
      this.log('‚ùå MONGODB_URI non d√©fini dans .env.local', 'error')
      return false
    }
    this.log('‚úÖ MONGODB_URI d√©fini')

    if (!process.env.PAYLOAD_SECRET) {
      this.log('‚ùå PAYLOAD_SECRET non d√©fini dans .env.local', 'error')
      return false
    }
    this.log('‚úÖ PAYLOAD_SECRET d√©fini')

    // V√©rifier les fichiers n√©cessaires
    const requiredFiles = ['src/payload.config.ts', 'src/data/mock-data.ts', 'package.json']

    for (const file of requiredFiles) {
      if (!existsSync(join(process.cwd(), file))) {
        this.log(`‚ùå Fichier requis manquant: ${file}`, 'error')
        return false
      }
      this.log(`‚úÖ Fichier trouv√©: ${file}`)
    }

    return true
  }

  private printResults() {
    this.log('\nüìä R√âSULTATS DE LA MIGRATION')
    this.log('=' * 50)

    const successful = this.results.filter(r => r.success).length
    const failed = this.results.filter(r => !r.success).length
    const total = this.results.length

    this.log(`‚úÖ Succ√®s: ${successful}/${total}`)
    this.log(`‚ùå √âchecs: ${failed}/${total}`)

    this.log('\nüìã D√©tail des √©tapes:')
    for (const result of this.results) {
      const icon = result.success ? '‚úÖ' : '‚ùå'
      this.log(`  ${icon} ${result.step}`)

      if (result.error) {
        this.log(`    Erreur: ${result.error}`, 'error')
      }
    }

    if (failed === 0) {
      this.log('\nüéâ Migration compl√®te r√©ussie!', 'success')
      this.log('\nüìñ Prochaines √©tapes:')
      this.log('1. Red√©marrer le serveur: npm run dev')
      this.log("2. Acc√©der √† l'admin Payload: http://localhost:3010/admin")
      this.log("3. Tester l'application: http://localhost:3010")
      this.log("4. V√©rifier les donn√©es migr√©es dans l'interface admin")
    } else {
      this.log(`\n‚ö†Ô∏è Migration partiellement r√©ussie (${failed} √©chec(s))`, 'warning')
      this.log('\nüîß Actions recommand√©es:')
      this.log('1. V√©rifier les erreurs ci-dessus')
      this.log('2. Corriger les probl√®mes identifi√©s')
      this.log('3. Relancer la migration: npm run migrate')
    }
  }

  private showHelp() {
    console.log(`
üöÄ Script de migration compl√®te Payload CMS

Usage: npx tsx src/scripts/migrate-complete.ts [options]

Options:
  --help       Afficher cette aide
  --dry-run    Mode test (aucune modification)
  --skip-test  Ignorer les tests
  --force      Forcer la migration m√™me si des donn√©es existent

Ce script effectue:
  1. V√©rification des pr√©requis
  2. Migration des donn√©es mock vers Payload
  3. Tests de la migration
  4. Basculement vers Payload CMS
  5. G√©n√©ration des types TypeScript
  6. Tests finaux

Pr√©requis:
  - Node.js et npm install√©s
  - Variables d'environnement configur√©es (.env.local)
  - MongoDB accessible
  - Fichiers de configuration pr√©sents
`)
  }

  async run() {
    const args = process.argv.slice(2)

    if (args.includes('--help')) {
      this.showHelp()
      return true
    }

    this.log('üöÄ D√âMARRAGE DE LA MIGRATION COMPL√àTE')
    this.log('=' * 50)

    // V√©rifier les pr√©requis
    if (!this.checkPrerequisites()) {
      this.log('‚ùå Pr√©requis non satisfaits - Arr√™t de la migration', 'error')
      return false
    }

    this.log('\n‚úÖ Pr√©requis satisfaits - D√©marrage de la migration')

    // Ex√©cuter chaque √©tape
    for (const step of this.steps) {
      const success = await this.executeStep(step)

      if (!success && step.required) {
        this.log(`üí• Arr√™t de la migration - √âtape requise √©chou√©e: ${step.name}`, 'error')
        break
      }
    }

    // Afficher les r√©sultats
    this.printResults()

    const allRequiredSuccessful = this.results
      .filter(r => this.steps.find(s => s.name === r.step)?.required)
      .every(r => r.success)

    return allRequiredSuccessful
  }
}

// Fonction principale
async function runCompleteMigration() {
  const manager = new CompleteMigrationManager()
  const success = await manager.run()

  process.exit(success ? 0 : 1)
}

// Ex√©cuter la migration compl√®te
runCompleteMigration().catch(error => {
  console.error('‚ùå Erreur fatale lors de la migration:', error)
  process.exit(1)
})
