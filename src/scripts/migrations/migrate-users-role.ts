#!/usr/bin/env tsx
/**
 * Migration: Users - Role Enum Fix
 *
 * PROBL√àME:
 * - Payload attend: role ‚àà ['admin', 'user']
 * - MongoDB contient: role = 'superAdmin'
 *
 * SOLUTION:
 * - Convertir 'superAdmin' ‚Üí 'admin'
 * - OU ajouter 'superAdmin' au sch√©ma Payload
 *
 * Usage: npx tsx src/scripts/migrations/migrate-users-role.ts
 */

import { MongoClient } from 'mongodb'
import * as path from 'path'
import dotenv from 'dotenv'
import * as readline from 'readline'

dotenv.config({ path: path.resolve(__dirname, '../../../.env.local') })

interface UserDoc {
  _id: any
  email: string
  name: string
  role: string
}

async function askConfirmation(question: string): Promise<boolean> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  })

  return new Promise(resolve => {
    rl.question(question + ' (y/n): ', answer => {
      rl.close()
      resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes')
    })
  })
}

async function migrateUsersRole(): Promise<void> {
  const mongoUri = process.env['MONGODB_URI']

  if (!mongoUri) {
    throw new Error('‚ùå MONGODB_URI non d√©fini dans .env.local')
  }

  console.log('üöÄ Migration: Users - Role Enum')
  console.log('üìã Conversion: "superAdmin" ‚Üí "admin"\n')

  const client = new MongoClient(mongoUri)

  try {
    await client.connect()
    console.log('‚úÖ Connexion MongoDB √©tablie\n')

    const db = client.db()
    const usersCollection = db.collection<UserDoc>('users')

    // Trouver tous les users avec role = 'superAdmin'
    const usersWithSuperAdmin = await usersCollection
      .find({
        role: 'superAdmin',
      })
      .toArray()

    console.log(`üìä ${usersWithSuperAdmin.length} utilisateur(s) avec role="superAdmin"\n`)

    if (usersWithSuperAdmin.length === 0) {
      console.log('‚ÑπÔ∏è  Aucun utilisateur √† migrer')
      return
    }

    // Afficher les utilisateurs concern√©s
    console.log('üë§ Utilisateurs concern√©s:')
    for (const user of usersWithSuperAdmin) {
      console.log(`   ‚Ä¢ ${user.email} (${user.name}) - role: ${user.role}`)
    }
    console.log()

    // Demander confirmation
    const confirmed = await askConfirmation(
      `‚ö†Ô∏è  Voulez-vous convertir ${usersWithSuperAdmin.length} utilisateur(s) de "superAdmin" ‚Üí "admin" ?`
    )

    if (!confirmed) {
      console.log('‚ùå Migration annul√©e par l\'utilisateur')
      return
    }

    let migratedCount = 0
    let errorCount = 0

    for (const user of usersWithSuperAdmin) {
      try {
        console.log(`üîÑ Migration ${user.email}...`)

        const result = await usersCollection.updateOne(
          { _id: user._id },
          {
            $set: {
              role: 'admin',
              updatedAt: new Date(),
            },
          }
        )

        if (result.modifiedCount === 1) {
          console.log(`   ‚úÖ Role mis √† jour: "superAdmin" ‚Üí "admin"\n`)
          migratedCount++
        } else {
          console.log(`   ‚ùå √âchec de la mise √† jour\n`)
          errorCount++
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors de la migration de ${user.email}:`, error)
        errorCount++
      }
    }

    // R√©sum√©
    console.log('\n' + '='.repeat(60))
    console.log('üìä R√âSUM√â DE LA MIGRATION')
    console.log('='.repeat(60))
    console.log(`‚úÖ Utilisateurs migr√©s: ${migratedCount}`)
    console.log(`‚ùå Erreurs: ${errorCount}`)
    console.log(`üìä Total: ${usersWithSuperAdmin.length}`)

    // V√©rification post-migration
    console.log('\nüîç V√©rification post-migration...')
    const remainingSuperAdmins = await usersCollection.countDocuments({
      role: 'superAdmin',
    })

    if (remainingSuperAdmins === 0) {
      console.log('‚úÖ Aucun utilisateur avec role="superAdmin" restant')
    } else {
      console.log(`‚ö†Ô∏è  ${remainingSuperAdmins} utilisateur(s) avec role="superAdmin" encore pr√©sent(s)`)
    }

    const admins = await usersCollection.countDocuments({ role: 'admin' })
    console.log(`üìä Total utilisateurs avec role="admin": ${admins}`)

    console.log('\n‚úÖ Migration termin√©e!')
  } catch (error) {
    console.error('‚ùå Erreur fatale lors de la migration:', error)
    throw error
  } finally {
    await client.close()
    console.log('üîå Connexion MongoDB ferm√©e')
  }
}

// Ex√©cuter la migration
migrateUsersRole().catch(error => {
  console.error('‚ùå Erreur:', error)
  process.exit(1)
})
