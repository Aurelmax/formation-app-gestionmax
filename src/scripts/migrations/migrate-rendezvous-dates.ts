#!/usr/bin/env tsx
/**
 * Migration: Rendez-vous - Date Type Fix
 *
 * PROBL√àME:
 * - Payload attend: date de type Date object
 * - MongoDB contient: date de type string ("2025-10-24")
 *
 * SOLUTION:
 * Convertir toutes les dates string en Date objects
 *
 * Usage: npx tsx src/scripts/migrations/migrate-rendezvous-dates.ts
 */

import { MongoClient } from 'mongodb'
import * as path from 'path'
import dotenv from 'dotenv'

dotenv.config({ path: path.resolve(__dirname, '../../../.env.local') })

interface RendezVousDoc {
  _id: any
  programme: any
  client: {
    nom: string
    prenom: string
    email: string
  }
  date: string | Date
  heure: string
  type: string
}

async function migrateRendezVousDates(): Promise<void> {
  const mongoUri = process.env['MONGODB_URI']

  if (!mongoUri) {
    throw new Error('‚ùå MONGODB_URI non d√©fini dans .env.local')
  }

  console.log('üöÄ Migration: Rendez-vous - Type Date')
  console.log('üìã Conversion: string ‚Üí Date object\n')

  const client = new MongoClient(mongoUri)

  try {
    await client.connect()
    console.log('‚úÖ Connexion MongoDB √©tablie\n')

    const db = client.db()
    const rdvCollection = db.collection<RendezVousDoc>('rendez-vous')

    // Trouver tous les rendez-vous
    const allRendezVous = await rdvCollection.find({}).toArray()

    console.log(`üìä ${allRendezVous.length} rendez-vous trouv√©(s)\n`)

    if (allRendezVous.length === 0) {
      console.log('‚ÑπÔ∏è  Aucun rendez-vous √† migrer')
      return
    }

    let migratedCount = 0
    let skippedCount = 0
    let errorCount = 0

    for (const rdv of allRendezVous) {
      try {
        // V√©rifier si la date est d√©j√† un objet Date
        if (rdv.date instanceof Date) {
          console.log(`‚è≠Ô∏è  Rendez-vous ${rdv._id} - date d√©j√† au format Date`)
          skippedCount++
          continue
        }

        // V√©rifier si la date est une string
        if (typeof rdv.date !== 'string') {
          console.log(`‚ö†Ô∏è  Rendez-vous ${rdv._id} - type date inattendu: ${typeof rdv.date}`)
          skippedCount++
          continue
        }

        // Convertir la date string en Date object
        const dateString = rdv.date as string
        const dateObject = new Date(dateString)

        // V√©rifier que la conversion est valide
        if (isNaN(dateObject.getTime())) {
          console.log(`‚ùå Rendez-vous ${rdv._id} - date invalide: "${dateString}"`)
          errorCount++
          continue
        }

        const clientName = `${rdv.client?.prenom || ''} ${rdv.client?.nom || ''}`.trim() || 'Client inconnu'
        console.log(`üîÑ Migration rendez-vous ${rdv._id}`)
        console.log(`   Client: ${clientName}`)
        console.log(`   Avant: "${dateString}" (string)`)
        console.log(`   Apr√®s: ${dateObject.toISOString()} (Date)`)

        // Mettre √† jour le document
        const result = await rdvCollection.updateOne(
          { _id: rdv._id },
          {
            $set: {
              date: dateObject,
              updatedAt: new Date(),
            },
          }
        )

        if (result.modifiedCount === 1) {
          console.log(`   ‚úÖ Migr√© avec succ√®s\n`)
          migratedCount++
        } else {
          console.log(`   ‚ùå √âchec de la mise √† jour\n`)
          errorCount++
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors de la migration du rendez-vous ${rdv._id}:`, error)
        errorCount++
      }
    }

    // R√©sum√©
    console.log('\n' + '='.repeat(60))
    console.log('üìä R√âSUM√â DE LA MIGRATION')
    console.log('='.repeat(60))
    console.log(`‚úÖ Rendez-vous migr√©s: ${migratedCount}`)
    console.log(`‚è≠Ô∏è  Rendez-vous ignor√©s (d√©j√† Date): ${skippedCount}`)
    console.log(`‚ùå Erreurs: ${errorCount}`)
    console.log(`üìä Total: ${allRendezVous.length}`)

    // V√©rification post-migration
    console.log('\nüîç V√©rification post-migration...')
    const verificationResult = await rdvCollection.findOne({
      _id: allRendezVous[0]?._id,
    })

    if (verificationResult && verificationResult.date instanceof Date) {
      console.log('‚úÖ Structure valid√©e: date au format Date object')
      console.log(`   Exemple: ${verificationResult.date.toISOString()}`)
    } else {
      console.log('‚ö†Ô∏è  Structure non conforme apr√®s migration')
      console.log(`   Type actuel: ${typeof verificationResult?.date}`)
    }

    console.log('\n‚úÖ Migration termin√©e!')
  } catch (error) {
    console.error('‚ùå Erreur fatale lors de la migration:', error)
    throw error
  } finally {
    await client.close()
    console.log('üîå Connexion MongoDB ferm√©e')
  }
}

// Ex√©cuter la migration
migrateRendezVousDates().catch(error => {
  console.error('‚ùå Erreur:', error)
  process.exit(1)
})
