#!/usr/bin/env tsx
/**
 * Migration: Programmes - Competences Structure
 *
 * PROBL√àME CRITIQUE:
 * - Payload attend: competences: [{ competence: "WordPress" }, { competence: "SEO" }]
 * - MongoDB contient: competences: ["WordPress", "SEO", ...]
 *
 * Cette divergence cause l'erreur:
 * "TypeError: Cannot delete property '0' of [object String]"
 *
 * SOLUTION:
 * Transformer tous les tableaux de strings en tableaux d'objets
 *
 * Usage: npx tsx src/scripts/migrations/migrate-programmes-competences.ts
 */

import { MongoClient } from 'mongodb'
import * as path from 'path'
import dotenv from 'dotenv'

dotenv.config({ path: path.resolve(__dirname, '../../../.env.local') })

interface ProgrammeDoc {
  _id: any
  codeFormation: string
  titre: string
  competences: string[] | Array<{ competence: string }>
}

async function migrateProgrammesCompetences(): Promise<void> {
  const mongoUri = process.env['MONGODB_URI']

  if (!mongoUri) {
    throw new Error('‚ùå MONGODB_URI non d√©fini dans .env.local')
  }

  console.log('üöÄ Migration: Programmes - Structure competences')
  console.log('üìã Transformation: [string] ‚Üí [{competence: string}]\n')

  const client = new MongoClient(mongoUri)

  try {
    await client.connect()
    console.log('‚úÖ Connexion MongoDB √©tablie\n')

    const db = client.db()
    const programmesCollection = db.collection<ProgrammeDoc>('programmes')

    // Trouver tous les programmes avec competences en array de strings
    const programmesWithStringArray = await programmesCollection
      .find({
        competences: { $type: 'array' },
      })
      .toArray()

    console.log(`üìä ${programmesWithStringArray.length} programme(s) trouv√©(s)\n`)

    if (programmesWithStringArray.length === 0) {
      console.log('‚ÑπÔ∏è  Aucun programme √† migrer')
      return
    }

    let migratedCount = 0
    let skippedCount = 0
    let errorCount = 0

    for (const programme of programmesWithStringArray) {
      try {
        // V√©rifier si c'est d√©j√† au bon format
        if (
          Array.isArray(programme.competences) &&
          programme.competences.length > 0 &&
          typeof programme.competences[0] === 'object' &&
          'competence' in programme.competences[0]
        ) {
          console.log(`‚è≠Ô∏è  Programme "${programme.codeFormation}" d√©j√† au bon format`)
          skippedCount++
          continue
        }

        // V√©rifier si c'est un array de strings
        if (
          !Array.isArray(programme.competences) ||
          programme.competences.length === 0 ||
          typeof programme.competences[0] !== 'string'
        ) {
          console.log(`‚ö†Ô∏è  Programme "${programme.codeFormation}" - format inattendu, skip`)
          skippedCount++
          continue
        }

        // Transformation: [string] ‚Üí [{competence: string}]
        const oldCompetences = programme.competences as string[]
        const newCompetences = oldCompetences.map(comp => ({
          competence: comp,
        }))

        console.log(`üîÑ Migration "${programme.codeFormation}"`)
        console.log(`   Avant: [${oldCompetences.slice(0, 3).join(', ')}${oldCompetences.length > 3 ? ', ...' : ''}]`)
        console.log(`   Apr√®s: [${newCompetences.slice(0, 2).map(c => `{competence: "${c.competence}"}`).join(', ')}${newCompetences.length > 2 ? ', ...' : ''}]`)

        // Mettre √† jour le document
        const result = await programmesCollection.updateOne(
          { _id: programme._id },
          {
            $set: {
              competences: newCompetences,
              updatedAt: new Date(),
            },
          }
        )

        if (result.modifiedCount === 1) {
          console.log(`   ‚úÖ Migr√© avec succ√®s (${newCompetences.length} comp√©tences)\n`)
          migratedCount++
        } else {
          console.log(`   ‚ùå √âchec de la mise √† jour\n`)
          errorCount++
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors de la migration du programme "${programme.codeFormation}":`, error)
        errorCount++
      }
    }

    // R√©sum√©
    console.log('\n' + '='.repeat(60))
    console.log('üìä R√âSUM√â DE LA MIGRATION')
    console.log('='.repeat(60))
    console.log(`‚úÖ Programmes migr√©s: ${migratedCount}`)
    console.log(`‚è≠Ô∏è  Programmes ignor√©s (d√©j√† bon format): ${skippedCount}`)
    console.log(`‚ùå Erreurs: ${errorCount}`)
    console.log(`üìä Total: ${programmesWithStringArray.length}`)

    // V√©rification post-migration
    console.log('\nüîç V√©rification post-migration...')
    const verificationResult = await programmesCollection.findOne({
      _id: programmesWithStringArray[0]?._id,
    })

    if (verificationResult && Array.isArray(verificationResult.competences)) {
      const firstComp = verificationResult.competences[0]
      if (typeof firstComp === 'object' && 'competence' in firstComp) {
        console.log('‚úÖ Structure valid√©e: competences au format objet')
        console.log(`   Exemple: ${JSON.stringify(verificationResult.competences.slice(0, 2), null, 2)}`)
      } else {
        console.log('‚ö†Ô∏è  Structure non conforme apr√®s migration')
      }
    }

    console.log('\n‚úÖ Migration termin√©e!')
  } catch (error) {
    console.error('‚ùå Erreur fatale lors de la migration:', error)
    throw error
  } finally {
    await client.close()
    console.log('üîå Connexion MongoDB ferm√©e')
  }
}

// Ex√©cuter la migration
migrateProgrammesCompetences().catch(error => {
  console.error('‚ùå Erreur:', error)
  process.exit(1)
})
