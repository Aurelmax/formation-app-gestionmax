/**
 * Script pour mettre √† jour la structure des programmes existants
 * avec les nouveaux champs r√©glementaires
 */

import { MongoClient } from 'mongodb';
import dotenv from 'dotenv';
import path from 'path';

dotenv.config({ path: path.resolve(__dirname, '../../.env.local') });

async function updateProgrammesStructure() {
  console.log('üîÑ Mise √† jour de la structure des programmes...');

  const mongoUri = process.env.MONGODB_URI;
  if (!mongoUri) {
    console.error('‚ùå MONGODB_URI n\'est pas d√©fini dans .env.local');
    return;
  }

  let client: MongoClient | undefined;
  try {
    client = new MongoClient(mongoUri);
    await client.connect();
    console.log('‚úÖ Connexion MongoDB √©tablie');

    const db = client.db();
    const collection = db.collection('programmes');

    // R√©cup√©rer tous les programmes existants
    const programmes = await collection.find({}).toArray();
    console.log(`üìã ${programmes.length} programmes trouv√©s`);

    let updatedCount = 0;

    for (const programme of programmes) {
      const updateData: any = {};

      // Ajouter les champs manquants avec des valeurs par d√©faut
      if (!programme.objectifs) {
        updateData.objectifs = `Objectifs p√©dagogiques pour ${programme.titre}`;
      }
      
      if (!programme.prerequis) {
        updateData.prerequis = 'Ma√Ætriser son environnement et les fonctions de base pour utiliser un ordinateur.';
      }
      
      if (!programme.publicConcerne) {
        updateData.publicConcerne = 'Artisans, commer√ßants, professions lib√©rales et entrepreneurs.';
      }
      
      if (!programme.horaires) {
        updateData.horaires = '9h √† 13h et de 14h √† 17h';
      }
      
      if (!programme.delaisMiseEnPlace) {
        updateData.delaisMiseEnPlace = '√Ä r√©ception de l\'accord de prise en charge';
      }
      
      if (!programme.modalitesReglement) {
        updateData.modalitesReglement = 'Ch√®que ou virement √† r√©ception de facture';
      }
      
      if (!programme.ressources) {
        updateData.ressources = [
          'Salle de formation √©quip√©e',
          'Support de cours',
          'Mat√©riel informatique'
        ];
      }
      
      if (!programme.modalitesEvaluation) {
        updateData.modalitesEvaluation = '√âvaluation des connaissances th√©oriques et travaux pratiques';
      }
      
      if (!programme.sanctionFormation) {
        updateData.sanctionFormation = 'Certificat de r√©alisation de formation';
      }
      
      if (!programme.niveauCertification) {
        updateData.niveauCertification = 'Aucune';
      }
      
      if (!programme.accessibiliteHandicap) {
        updateData.accessibiliteHandicap = 'Entretien t√©l√©phonique pour √©valuer les besoins sp√©cifiques au regard d\'une situation de handicap, mise en ≈ìuvre des adaptations p√©dagogiques, organisationnelles et mat√©rielles n√©cessaires.';
      }
      
      if (!programme.cessationAbandon) {
        updateData.cessationAbandon = 'En cas de renonciation avant le d√©but de la formation, aucune facturation. En cas de renonciation en cours de formation, la facturation se fera au prorata de l\'assiduit√©.';
      }

      // Informations formateur par d√©faut
      if (!programme.formateurNom) {
        updateData.formateurNom = 'Aur√©lien LAVAYSSIERE';
      }
      
      if (!programme.formateurEmail) {
        updateData.formateurEmail = 'aurelien@gestionmax.fr';
      }
      
      if (!programme.formateurTelephone) {
        updateData.formateurTelephone = '06.46.02.24.68';
      }
      
      if (!programme.formateurRole) {
        updateData.formateurRole = 'Consultant formateur en informatique de gestion';
      }
      
      if (!programme.formateurBiographie) {
        updateData.formateurBiographie = 'Aur√©lien LAVAYSSIERE est un consultant formateur en informatique de gestion, sp√©cialis√© dans la formation des adultes. Dot√© d\'une solide exp√©rience dans le domaine de la formation, Aur√©lien poss√®de une expertise approfondie en mati√®re de technologies web et de gestion d\'entreprise.';
      }

      // Mettre √† jour le programme s'il y a des champs √† ajouter
      if (Object.keys(updateData).length > 0) {
        await collection.updateOne(
          { _id: programme._id },
          { $set: updateData }
        );
        
        console.log(`‚úÖ Programme mis √† jour: ${programme.codeFormation} - ${programme.titre}`);
        updatedCount++;
      } else {
        console.log(`‚ÑπÔ∏è Programme d√©j√† √† jour: ${programme.codeFormation}`);
      }
    }

    console.log(`\nüìä R√©sum√© de la mise √† jour:`);
    console.log(`   ‚úÖ Programmes mis √† jour: ${updatedCount}`);
    console.log(`   üìã Total programmes: ${programmes.length}`);

  } catch (error: any) {
    console.error('‚ùå Erreur lors de la mise √† jour:', error);
  } finally {
    if (client) {
      await client.close();
    }
  }
}

updateProgrammesStructure();
