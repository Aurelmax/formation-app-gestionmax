import type { Metadata } from 'next'
import { Geist, Geist_Mono } from 'next/font/google'
import '../globals.css'

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
})

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
})

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en">
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              // Supprimer les attributs ajoutés par les extensions de navigateur
              if (typeof window !== 'undefined') {
                document.addEventListener('DOMContentLoaded', function() {
                  const body = document.body;
                  if (body) {
                    // Supprimer les attributs des extensions courantes
                    const extensionAttributes = [
                      'cz-shortcut-listen',
                      'data-new-gr-c-s-check-loaded',
                      'data-gr-ext-installed',
                      'data-gramm_editor',
                      'data-gramm',
                      'spellcheck',
                      'data-gramm_editor',
                      'data-gramm_id'
                    ];
                    
                    extensionAttributes.forEach(attr => {
                      body.removeAttribute(attr);
                    });
                    
                    // Supprimer les attributs de toutes les extensions
                    const allAttributes = Array.from(body.attributes);
                    allAttributes.forEach(attr => {
                      if (attr.name.startsWith('data-gramm') || 
                          attr.name.startsWith('data-new-gr') ||
                          attr.name.includes('extension') ||
                          attr.name.includes('grammarly')) {
                        body.removeAttribute(attr.name);
                      }
                    });
                  }
                });
                
                // Désactiver le service worker des extensions
                if ('serviceWorker' in navigator) {
                  navigator.serviceWorker.getRegistrations().then(function(registrations) {
                    registrations.forEach(function(registration) {
                      if (registration.scope.includes('chrome-extension://') ||
                          registration.scope.includes('moz-extension://')) {
                        registration.unregister();
                      }
                    });
                  });
                }
              }
            `,
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        suppressHydrationWarning={true}
      >
        {children}
      </body>
    </html>
  )
}
